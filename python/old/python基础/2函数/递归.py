#!/usr/bin/env python3
# -*- coding: utf-8 -*-


####### 递归 2017年10月31日


'''
在计算机中，函数调用是通过栈（stack）这种数据结构实现的，
每当进入一个函数调用，栈就会加一层栈帧，
每当函数返回，栈就会减一层栈帧。
由于栈的大小不是无限的，所以，递归调用的次数过多，会导致栈溢出
'''


# 尾递归
'''
尾递归是指，在函数返回的时候，调用自身本身
并且，return语句不能包含表达式。
这样，编译器或者解释器就可以把尾递归做优化，
使递归本身无论调用多少次，都只占用一个栈帧，
不会出现栈溢出的情况。
'''

def fact(n):
    return fact_iter(n, 1)

def fact_iter(num, product):
    if num == 1:
        return product
    return fact_item(num - 1, num * product)


'''
遗憾的是，大多数编程语言没有针对尾递归做优化，
Python解释器也没有做优化，
所以，即使把上面的fact(n)函数改成尾递归方式，也会导致栈溢出。
'''

'''
-----------------------------------------练习
练习

汉诺塔的移动可以用递归函数非常简单地实现。

请编写move(n, a, b, c)函数，它接收参数n，表示3个柱子A、B、C中第1个柱子A的盘子数量，然后打印出把所有盘子从A借助B移动到C的方法
'''
# 利用递归函数移动汉诺塔:
def move(n, a, b, c):
    if n == 1:
        print('move', a, '-->', c)
    else:
        # 将n-1个盘子由a -> b
        move(n-1, a, c, b)
        # 将最后1个盘子 由 a -> c
        move(1, a, b, c)
        # 将n-1个盘子由b -> c
        move(n-1, b, a, c)

move(4, 'A', 'B', 'C')